# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from id_selector/BoundingBox.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class BoundingBox(genpy.Message):
  _md5sum = "10e5b2361740386e88e5a80aa25a88f8"
  _type = "id_selector/BoundingBox"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
int32 x
int32 y
int32 width
int32 height
bool tracked
geometry_msgs/Point person3dLocation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','x','y','width','height','tracked','person3dLocation']
  _slot_types = ['int32','int32','int32','int32','int32','bool','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,x,y,width,height,tracked,person3dLocation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoundingBox, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.tracked is None:
        self.tracked = False
      if self.person3dLocation is None:
        self.person3dLocation = geometry_msgs.msg.Point()
    else:
      self.id = 0
      self.x = 0
      self.y = 0
      self.width = 0
      self.height = 0
      self.tracked = False
      self.person3dLocation = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5iB3d().pack(_x.id, _x.x, _x.y, _x.width, _x.height, _x.tracked, _x.person3dLocation.x, _x.person3dLocation.y, _x.person3dLocation.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.person3dLocation is None:
        self.person3dLocation = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 45
      (_x.id, _x.x, _x.y, _x.width, _x.height, _x.tracked, _x.person3dLocation.x, _x.person3dLocation.y, _x.person3dLocation.z,) = _get_struct_5iB3d().unpack(str[start:end])
      self.tracked = bool(self.tracked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5iB3d().pack(_x.id, _x.x, _x.y, _x.width, _x.height, _x.tracked, _x.person3dLocation.x, _x.person3dLocation.y, _x.person3dLocation.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.person3dLocation is None:
        self.person3dLocation = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 45
      (_x.id, _x.x, _x.y, _x.width, _x.height, _x.tracked, _x.person3dLocation.x, _x.person3dLocation.y, _x.person3dLocation.z,) = _get_struct_5iB3d().unpack(str[start:end])
      self.tracked = bool(self.tracked)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5iB3d = None
def _get_struct_5iB3d():
    global _struct_5iB3d
    if _struct_5iB3d is None:
        _struct_5iB3d = struct.Struct("<5iB3d")
    return _struct_5iB3d
