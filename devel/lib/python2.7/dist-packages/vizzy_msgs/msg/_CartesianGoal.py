# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vizzy_msgs/CartesianGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CartesianGoal(genpy.Message):
  _md5sum = "f363fa97393b5c8280ca1eb3765f4c8e"
  _type = "vizzy_msgs/CartesianGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8 CARTESIAN=0
uint8 HOME=1
uint8 VELOCITY=2
uint8 GRAB=3
uint8 RELEASE=4
uint8 PREEMPT=5
uint8 type

geometry_msgs/PoseStamped end_effector_pose
std_msgs/Float32[] velocity
std_msgs/Float32 duration

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Float32
float32 data"""
  # Pseudo-constants
  CARTESIAN = 0
  HOME = 1
  VELOCITY = 2
  GRAB = 3
  RELEASE = 4
  PREEMPT = 5

  __slots__ = ['type','end_effector_pose','velocity','duration']
  _slot_types = ['uint8','geometry_msgs/PoseStamped','std_msgs/Float32[]','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,end_effector_pose,velocity,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartesianGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.end_effector_pose is None:
        self.end_effector_pose = geometry_msgs.msg.PoseStamped()
      if self.velocity is None:
        self.velocity = []
      if self.duration is None:
        self.duration = std_msgs.msg.Float32()
    else:
      self.type = 0
      self.end_effector_pose = geometry_msgs.msg.PoseStamped()
      self.velocity = []
      self.duration = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.type, _x.end_effector_pose.header.seq, _x.end_effector_pose.header.stamp.secs, _x.end_effector_pose.header.stamp.nsecs))
      _x = self.end_effector_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.end_effector_pose.pose.position.x, _x.end_effector_pose.pose.position.y, _x.end_effector_pose.pose.position.z, _x.end_effector_pose.pose.orientation.x, _x.end_effector_pose.pose.orientation.y, _x.end_effector_pose.pose.orientation.z, _x.end_effector_pose.pose.orientation.w))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.velocity:
        buff.write(_get_struct_f().pack(val1.data))
      buff.write(_get_struct_f().pack(self.duration.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.end_effector_pose is None:
        self.end_effector_pose = geometry_msgs.msg.PoseStamped()
      if self.velocity is None:
        self.velocity = None
      if self.duration is None:
        self.duration = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.type, _x.end_effector_pose.header.seq, _x.end_effector_pose.header.stamp.secs, _x.end_effector_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_effector_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.end_effector_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.end_effector_pose.pose.position.x, _x.end_effector_pose.pose.position.y, _x.end_effector_pose.pose.position.z, _x.end_effector_pose.pose.orientation.x, _x.end_effector_pose.pose.orientation.y, _x.end_effector_pose.pose.orientation.z, _x.end_effector_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.velocity = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.velocity.append(val1)
      start = end
      end += 4
      (self.duration.data,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.type, _x.end_effector_pose.header.seq, _x.end_effector_pose.header.stamp.secs, _x.end_effector_pose.header.stamp.nsecs))
      _x = self.end_effector_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.end_effector_pose.pose.position.x, _x.end_effector_pose.pose.position.y, _x.end_effector_pose.pose.position.z, _x.end_effector_pose.pose.orientation.x, _x.end_effector_pose.pose.orientation.y, _x.end_effector_pose.pose.orientation.z, _x.end_effector_pose.pose.orientation.w))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.velocity:
        buff.write(_get_struct_f().pack(val1.data))
      buff.write(_get_struct_f().pack(self.duration.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.end_effector_pose is None:
        self.end_effector_pose = geometry_msgs.msg.PoseStamped()
      if self.velocity is None:
        self.velocity = None
      if self.duration is None:
        self.duration = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.type, _x.end_effector_pose.header.seq, _x.end_effector_pose.header.stamp.secs, _x.end_effector_pose.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_effector_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.end_effector_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.end_effector_pose.pose.position.x, _x.end_effector_pose.pose.position.y, _x.end_effector_pose.pose.position.z, _x.end_effector_pose.pose.orientation.x, _x.end_effector_pose.pose.orientation.y, _x.end_effector_pose.pose.orientation.z, _x.end_effector_pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.velocity = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.velocity.append(val1)
      start = end
      end += 4
      (self.duration.data,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
