// Generated by gencpp from file vizzy_msgs/TacVector.msg
// DO NOT EDIT!


#ifndef VIZZY_MSGS_MESSAGE_TACVECTOR_H
#define VIZZY_MSGS_MESSAGE_TACVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vizzy_msgs
{
template <class ContainerAllocator>
struct TacVector_
{
  typedef TacVector_<ContainerAllocator> Type;

  TacVector_()
    : x(0)
    , y(0)
    , z(0)  {
    }
  TacVector_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int16_t _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::vizzy_msgs::TacVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vizzy_msgs::TacVector_<ContainerAllocator> const> ConstPtr;

}; // struct TacVector_

typedef ::vizzy_msgs::TacVector_<std::allocator<void> > TacVector;

typedef boost::shared_ptr< ::vizzy_msgs::TacVector > TacVectorPtr;
typedef boost::shared_ptr< ::vizzy_msgs::TacVector const> TacVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vizzy_msgs::TacVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vizzy_msgs::TacVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vizzy_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'vizzy_msgs': ['/home/miguel/catkin_ws/devel/share/vizzy_msgs/msg', '/home/miguel/catkin_ws/src/vizzy/vizzy_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vizzy_msgs::TacVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vizzy_msgs::TacVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vizzy_msgs::TacVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vizzy_msgs::TacVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vizzy_msgs::TacVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vizzy_msgs::TacVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vizzy_msgs::TacVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85729383565f7e059d4a213b3db1317b";
  }

  static const char* value(const ::vizzy_msgs::TacVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85729383565f7e05ULL;
  static const uint64_t static_value2 = 0x9d4a213b3db1317bULL;
};

template<class ContainerAllocator>
struct DataType< ::vizzy_msgs::TacVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vizzy_msgs/TacVector";
  }

  static const char* value(const ::vizzy_msgs::TacVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vizzy_msgs::TacVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x\n\
int16 y\n\
int16 z\n\
";
  }

  static const char* value(const ::vizzy_msgs::TacVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vizzy_msgs::TacVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TacVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vizzy_msgs::TacVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vizzy_msgs::TacVector_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIZZY_MSGS_MESSAGE_TACVECTOR_H
