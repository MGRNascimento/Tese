// Generated by gencpp from file id_selector/BoundingBox.msg
// DO NOT EDIT!


#ifndef ID_SELECTOR_MESSAGE_BOUNDINGBOX_H
#define ID_SELECTOR_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace id_selector
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : id(0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)
    , tracked(false)
    , person3dLocation()  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)
    , tracked(false)
    , person3dLocation(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef uint8_t _tracked_type;
  _tracked_type tracked;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _person3dLocation_type;
  _person3dLocation_type person3dLocation;





  typedef boost::shared_ptr< ::id_selector::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::id_selector::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::id_selector::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::id_selector::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::id_selector::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::id_selector::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::id_selector::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace id_selector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'id_selector': ['/home/miguel/catkin_ws/src/vizzy/vizzy_ros_android_bridges/id_selector/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::id_selector::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::id_selector::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::id_selector::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::id_selector::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::id_selector::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::id_selector::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::id_selector::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10e5b2361740386e88e5a80aa25a88f8";
  }

  static const char* value(const ::id_selector::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10e5b2361740386eULL;
  static const uint64_t static_value2 = 0x88e5a80aa25a88f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::id_selector::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "id_selector/BoundingBox";
  }

  static const char* value(const ::id_selector::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::id_selector::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 x\n\
int32 y\n\
int32 width\n\
int32 height\n\
bool tracked\n\
geometry_msgs/Point person3dLocation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::id_selector::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::id_selector::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.tracked);
      stream.next(m.person3dLocation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::id_selector::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::id_selector::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracked);
    s << indent << "person3dLocation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.person3dLocation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ID_SELECTOR_MESSAGE_BOUNDINGBOX_H
