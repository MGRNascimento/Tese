# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vizzy_msgs/GazeGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GazeGoal(genpy.Message):
  _md5sum = "a1b8bf39eac0adbf0be2f97a6f149676"
  _type = "vizzy_msgs/GazeGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8 FIXATION_POINT=0
uint8 HOME=1             # POSITION ERROR SUPPRESSION
uint8 JOINT_VELOCITIES=2 # VELOCITY SUPPRESSION
uint8 type

uint8 CARTESIAN=0
uint8 JOINT=1
uint8 mode  # ONLY CARTESIAN IS IMPLEMENTED


geometry_msgs/PointStamped fixation_point

float64 fixation_point_error_tolerance  # max allowed error in meters
#float64 suppression_velocity # max allowed velocity in radians

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  FIXATION_POINT = 0
  HOME = 1
  JOINT_VELOCITIES = 2
  CARTESIAN = 0
  JOINT = 1

  __slots__ = ['type','mode','fixation_point','fixation_point_error_tolerance']
  _slot_types = ['uint8','uint8','geometry_msgs/PointStamped','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,mode,fixation_point,fixation_point_error_tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GazeGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.mode is None:
        self.mode = 0
      if self.fixation_point is None:
        self.fixation_point = geometry_msgs.msg.PointStamped()
      if self.fixation_point_error_tolerance is None:
        self.fixation_point_error_tolerance = 0.
    else:
      self.type = 0
      self.mode = 0
      self.fixation_point = geometry_msgs.msg.PointStamped()
      self.fixation_point_error_tolerance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.type, _x.mode, _x.fixation_point.header.seq, _x.fixation_point.header.stamp.secs, _x.fixation_point.header.stamp.nsecs))
      _x = self.fixation_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.fixation_point.point.x, _x.fixation_point.point.y, _x.fixation_point.point.z, _x.fixation_point_error_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.fixation_point is None:
        self.fixation_point = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.type, _x.mode, _x.fixation_point.header.seq, _x.fixation_point.header.stamp.secs, _x.fixation_point.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixation_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.fixation_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.fixation_point.point.x, _x.fixation_point.point.y, _x.fixation_point.point.z, _x.fixation_point_error_tolerance,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.type, _x.mode, _x.fixation_point.header.seq, _x.fixation_point.header.stamp.secs, _x.fixation_point.header.stamp.nsecs))
      _x = self.fixation_point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.fixation_point.point.x, _x.fixation_point.point.y, _x.fixation_point.point.z, _x.fixation_point_error_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.fixation_point is None:
        self.fixation_point = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.type, _x.mode, _x.fixation_point.header.seq, _x.fixation_point.header.stamp.secs, _x.fixation_point.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fixation_point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.fixation_point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.fixation_point.point.x, _x.fixation_point.point.y, _x.fixation_point.point.z, _x.fixation_point_error_tolerance,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3I = None
def _get_struct_2B3I():
    global _struct_2B3I
    if _struct_2B3I is None:
        _struct_2B3I = struct.Struct("<2B3I")
    return _struct_2B3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
