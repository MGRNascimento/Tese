// Auto-generated. Do not edit!

// (in-package vizzy_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class GazeGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.type = null;
      this.mode = null;
      this.fixation_point = null;
      this.fixation_point_error_tolerance = null;
    }
    else {
      if (initObj.hasOwnProperty('type')) {
        this.type = initObj.type
      }
      else {
        this.type = 0;
      }
      if (initObj.hasOwnProperty('mode')) {
        this.mode = initObj.mode
      }
      else {
        this.mode = 0;
      }
      if (initObj.hasOwnProperty('fixation_point')) {
        this.fixation_point = initObj.fixation_point
      }
      else {
        this.fixation_point = new geometry_msgs.msg.PointStamped();
      }
      if (initObj.hasOwnProperty('fixation_point_error_tolerance')) {
        this.fixation_point_error_tolerance = initObj.fixation_point_error_tolerance
      }
      else {
        this.fixation_point_error_tolerance = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GazeGoal
    // Serialize message field [type]
    bufferOffset = _serializer.uint8(obj.type, buffer, bufferOffset);
    // Serialize message field [mode]
    bufferOffset = _serializer.uint8(obj.mode, buffer, bufferOffset);
    // Serialize message field [fixation_point]
    bufferOffset = geometry_msgs.msg.PointStamped.serialize(obj.fixation_point, buffer, bufferOffset);
    // Serialize message field [fixation_point_error_tolerance]
    bufferOffset = _serializer.float64(obj.fixation_point_error_tolerance, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GazeGoal
    let len;
    let data = new GazeGoal(null);
    // Deserialize message field [type]
    data.type = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [mode]
    data.mode = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [fixation_point]
    data.fixation_point = geometry_msgs.msg.PointStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [fixation_point_error_tolerance]
    data.fixation_point_error_tolerance = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PointStamped.getMessageSize(object.fixation_point);
    return length + 10;
  }

  static datatype() {
    // Returns string type for a message object
    return 'vizzy_msgs/GazeGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a1b8bf39eac0adbf0be2f97a6f149676';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    uint8 FIXATION_POINT=0
    uint8 HOME=1             # POSITION ERROR SUPPRESSION
    uint8 JOINT_VELOCITIES=2 # VELOCITY SUPPRESSION
    uint8 type
    
    uint8 CARTESIAN=0
    uint8 JOINT=1
    uint8 mode  # ONLY CARTESIAN IS IMPLEMENTED
    
    
    geometry_msgs/PointStamped fixation_point
    
    float64 fixation_point_error_tolerance  # max allowed error in meters
    #float64 suppression_velocity # max allowed velocity in radians
    
    ================================================================================
    MSG: geometry_msgs/PointStamped
    # This represents a Point with reference coordinate frame and timestamp
    Header header
    Point point
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GazeGoal(null);
    if (msg.type !== undefined) {
      resolved.type = msg.type;
    }
    else {
      resolved.type = 0
    }

    if (msg.mode !== undefined) {
      resolved.mode = msg.mode;
    }
    else {
      resolved.mode = 0
    }

    if (msg.fixation_point !== undefined) {
      resolved.fixation_point = geometry_msgs.msg.PointStamped.Resolve(msg.fixation_point)
    }
    else {
      resolved.fixation_point = new geometry_msgs.msg.PointStamped()
    }

    if (msg.fixation_point_error_tolerance !== undefined) {
      resolved.fixation_point_error_tolerance = msg.fixation_point_error_tolerance;
    }
    else {
      resolved.fixation_point_error_tolerance = 0.0
    }

    return resolved;
    }
};

// Constants for message
GazeGoal.Constants = {
  FIXATION_POINT: 0,
  HOME: 1,
  JOINT_VELOCITIES: 2,
  CARTESIAN: 0,
  JOINT: 1,
}

module.exports = GazeGoal;
