// Auto-generated. Do not edit!

// (in-package vizzy_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let sensor_msgs = _finder('sensor_msgs');
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class GazeResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.state_reached = null;
      this.fixation_point = null;
      this.fixation_point_error = null;
      this.joint_states = null;
    }
    else {
      if (initObj.hasOwnProperty('state_reached')) {
        this.state_reached = initObj.state_reached
      }
      else {
        this.state_reached = false;
      }
      if (initObj.hasOwnProperty('fixation_point')) {
        this.fixation_point = initObj.fixation_point
      }
      else {
        this.fixation_point = new geometry_msgs.msg.PointStamped();
      }
      if (initObj.hasOwnProperty('fixation_point_error')) {
        this.fixation_point_error = initObj.fixation_point_error
      }
      else {
        this.fixation_point_error = 0.0;
      }
      if (initObj.hasOwnProperty('joint_states')) {
        this.joint_states = initObj.joint_states
      }
      else {
        this.joint_states = new sensor_msgs.msg.JointState();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GazeResult
    // Serialize message field [state_reached]
    bufferOffset = _serializer.bool(obj.state_reached, buffer, bufferOffset);
    // Serialize message field [fixation_point]
    bufferOffset = geometry_msgs.msg.PointStamped.serialize(obj.fixation_point, buffer, bufferOffset);
    // Serialize message field [fixation_point_error]
    bufferOffset = _serializer.float64(obj.fixation_point_error, buffer, bufferOffset);
    // Serialize message field [joint_states]
    bufferOffset = sensor_msgs.msg.JointState.serialize(obj.joint_states, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GazeResult
    let len;
    let data = new GazeResult(null);
    // Deserialize message field [state_reached]
    data.state_reached = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [fixation_point]
    data.fixation_point = geometry_msgs.msg.PointStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [fixation_point_error]
    data.fixation_point_error = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [joint_states]
    data.joint_states = sensor_msgs.msg.JointState.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PointStamped.getMessageSize(object.fixation_point);
    length += sensor_msgs.msg.JointState.getMessageSize(object.joint_states);
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'vizzy_msgs/GazeResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'd5c3318323b1e795566980b5f47176b6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    bool state_reached
    geometry_msgs/PointStamped fixation_point
    float64 fixation_point_error
    sensor_msgs/JointState joint_states
    
    ================================================================================
    MSG: geometry_msgs/PointStamped
    # This represents a Point with reference coordinate frame and timestamp
    Header header
    Point point
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: sensor_msgs/JointState
    # This is a message that holds data to describe the state of a set of torque controlled joints. 
    #
    # The state of each joint (revolute or prismatic) is defined by:
    #  * the position of the joint (rad or m),
    #  * the velocity of the joint (rad/s or m/s) and 
    #  * the effort that is applied in the joint (Nm or N).
    #
    # Each joint is uniquely identified by its name
    # The header specifies the time at which the joint states were recorded. All the joint states
    # in one message have to be recorded at the same time.
    #
    # This message consists of a multiple arrays, one for each part of the joint state. 
    # The goal is to make each of the fields optional. When e.g. your joints have no
    # effort associated with them, you can leave the effort array empty. 
    #
    # All arrays in this message should have the same size, or be empty.
    # This is the only way to uniquely associate the joint name with the correct
    # states.
    
    
    Header header
    
    string[] name
    float64[] position
    float64[] velocity
    float64[] effort
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GazeResult(null);
    if (msg.state_reached !== undefined) {
      resolved.state_reached = msg.state_reached;
    }
    else {
      resolved.state_reached = false
    }

    if (msg.fixation_point !== undefined) {
      resolved.fixation_point = geometry_msgs.msg.PointStamped.Resolve(msg.fixation_point)
    }
    else {
      resolved.fixation_point = new geometry_msgs.msg.PointStamped()
    }

    if (msg.fixation_point_error !== undefined) {
      resolved.fixation_point_error = msg.fixation_point_error;
    }
    else {
      resolved.fixation_point_error = 0.0
    }

    if (msg.joint_states !== undefined) {
      resolved.joint_states = sensor_msgs.msg.JointState.Resolve(msg.joint_states)
    }
    else {
      resolved.joint_states = new sensor_msgs.msg.JointState()
    }

    return resolved;
    }
};

module.exports = GazeResult;
