;; Auto-generated. Do not edit!


(when (boundp 'vizzy_msgs::GazeAction)
  (if (not (find-package "VIZZY_MSGS"))
    (make-package "VIZZY_MSGS"))
  (shadow 'GazeAction (find-package "VIZZY_MSGS")))
(unless (find-package "VIZZY_MSGS::GAZEACTION")
  (make-package "VIZZY_MSGS::GAZEACTION"))

(in-package "ROS")
;;//! \htmlinclude GazeAction.msg.html


(defclass vizzy_msgs::GazeAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod vizzy_msgs::GazeAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance vizzy_msgs::GazeActionGoal :init))
    ((:action_result __action_result) (instance vizzy_msgs::GazeActionResult :init))
    ((:action_feedback __action_feedback) (instance vizzy_msgs::GazeActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; vizzy_msgs/GazeActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; vizzy_msgs/GazeActionResult _action_result
    (send _action_result :serialization-length)
    ;; vizzy_msgs/GazeActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; vizzy_msgs/GazeActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; vizzy_msgs/GazeActionResult _action_result
       (send _action_result :serialize s)
     ;; vizzy_msgs/GazeActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; vizzy_msgs/GazeActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; vizzy_msgs/GazeActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; vizzy_msgs/GazeActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get vizzy_msgs::GazeAction :md5sum-) "2fa7d5b1d25c5d5a12431c9f48a86acd")
(setf (get vizzy_msgs::GazeAction :datatype-) "vizzy_msgs/GazeAction")
(setf (get vizzy_msgs::GazeAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

GazeActionGoal action_goal
GazeActionResult action_result
GazeActionFeedback action_feedback

================================================================================
MSG: vizzy_msgs/GazeActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
GazeGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: vizzy_msgs/GazeGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8 FIXATION_POINT=0
uint8 HOME=1             # POSITION ERROR SUPPRESSION
uint8 JOINT_VELOCITIES=2 # VELOCITY SUPPRESSION
uint8 type

uint8 CARTESIAN=0
uint8 JOINT=1
uint8 mode  # ONLY CARTESIAN IS IMPLEMENTED


geometry_msgs/PointStamped fixation_point

float64 fixation_point_error_tolerance  # max allowed error in meters
#float64 suppression_velocity # max allowed velocity in radians

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: vizzy_msgs/GazeActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
GazeResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: vizzy_msgs/GazeResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
bool state_reached
geometry_msgs/PointStamped fixation_point
float64 fixation_point_error
sensor_msgs/JointState joint_states

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: vizzy_msgs/GazeActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
GazeFeedback feedback

================================================================================
MSG: vizzy_msgs/GazeFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
bool state_reached
geometry_msgs/PointStamped fixation_point
float64 fixation_point_error
float64 velocity_error
sensor_msgs/JointState joint_states



")



(provide :vizzy_msgs/GazeAction "2fa7d5b1d25c5d5a12431c9f48a86acd")


