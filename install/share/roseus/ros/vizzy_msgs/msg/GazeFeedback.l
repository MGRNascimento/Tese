;; Auto-generated. Do not edit!


(when (boundp 'vizzy_msgs::GazeFeedback)
  (if (not (find-package "VIZZY_MSGS"))
    (make-package "VIZZY_MSGS"))
  (shadow 'GazeFeedback (find-package "VIZZY_MSGS")))
(unless (find-package "VIZZY_MSGS::GAZEFEEDBACK")
  (make-package "VIZZY_MSGS::GAZEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude GazeFeedback.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass vizzy_msgs::GazeFeedback
  :super ros::object
  :slots (_state_reached _fixation_point _fixation_point_error _velocity_error _joint_states ))

(defmethod vizzy_msgs::GazeFeedback
  (:init
   (&key
    ((:state_reached __state_reached) nil)
    ((:fixation_point __fixation_point) (instance geometry_msgs::PointStamped :init))
    ((:fixation_point_error __fixation_point_error) 0.0)
    ((:velocity_error __velocity_error) 0.0)
    ((:joint_states __joint_states) (instance sensor_msgs::JointState :init))
    )
   (send-super :init)
   (setq _state_reached __state_reached)
   (setq _fixation_point __fixation_point)
   (setq _fixation_point_error (float __fixation_point_error))
   (setq _velocity_error (float __velocity_error))
   (setq _joint_states __joint_states)
   self)
  (:state_reached
   (&optional __state_reached)
   (if __state_reached (setq _state_reached __state_reached)) _state_reached)
  (:fixation_point
   (&rest __fixation_point)
   (if (keywordp (car __fixation_point))
       (send* _fixation_point __fixation_point)
     (progn
       (if __fixation_point (setq _fixation_point (car __fixation_point)))
       _fixation_point)))
  (:fixation_point_error
   (&optional __fixation_point_error)
   (if __fixation_point_error (setq _fixation_point_error __fixation_point_error)) _fixation_point_error)
  (:velocity_error
   (&optional __velocity_error)
   (if __velocity_error (setq _velocity_error __velocity_error)) _velocity_error)
  (:joint_states
   (&rest __joint_states)
   (if (keywordp (car __joint_states))
       (send* _joint_states __joint_states)
     (progn
       (if __joint_states (setq _joint_states (car __joint_states)))
       _joint_states)))
  (:serialization-length
   ()
   (+
    ;; bool _state_reached
    1
    ;; geometry_msgs/PointStamped _fixation_point
    (send _fixation_point :serialization-length)
    ;; float64 _fixation_point_error
    8
    ;; float64 _velocity_error
    8
    ;; sensor_msgs/JointState _joint_states
    (send _joint_states :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _state_reached
       (if _state_reached (write-byte -1 s) (write-byte 0 s))
     ;; geometry_msgs/PointStamped _fixation_point
       (send _fixation_point :serialize s)
     ;; float64 _fixation_point_error
       (sys::poke _fixation_point_error (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _velocity_error
       (sys::poke _velocity_error (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; sensor_msgs/JointState _joint_states
       (send _joint_states :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _state_reached
     (setq _state_reached (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; geometry_msgs/PointStamped _fixation_point
     (send _fixation_point :deserialize buf ptr-) (incf ptr- (send _fixation_point :serialization-length))
   ;; float64 _fixation_point_error
     (setq _fixation_point_error (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _velocity_error
     (setq _velocity_error (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; sensor_msgs/JointState _joint_states
     (send _joint_states :deserialize buf ptr-) (incf ptr- (send _joint_states :serialization-length))
   ;;
   self)
  )

(setf (get vizzy_msgs::GazeFeedback :md5sum-) "c925c4396ef8f121f68659b242138ea2")
(setf (get vizzy_msgs::GazeFeedback :datatype-) "vizzy_msgs/GazeFeedback")
(setf (get vizzy_msgs::GazeFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
bool state_reached
geometry_msgs/PointStamped fixation_point
float64 fixation_point_error
float64 velocity_error
sensor_msgs/JointState joint_states



================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

")



(provide :vizzy_msgs/GazeFeedback "c925c4396ef8f121f68659b242138ea2")


